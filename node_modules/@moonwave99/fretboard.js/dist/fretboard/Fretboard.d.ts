import { Selection, ValueFn, BaseType } from 'd3-selection';
import { Systems } from '../fretboardSystem/systems/systems';
export declare type Tuning = string[];
export declare type Position = {
    string: number;
    fret: number;
    note?: string;
    disabled?: boolean;
    octave?: number;
    octaveInScale?: number;
    inBox?: boolean;
    interval?: string;
    degree?: number;
    chroma?: number;
} & Record<string, string | number | boolean | Array<string | number>>;
declare type FretboardHandler = (position: Position, event: MouseEvent) => void;
export declare type Barre = {
    fret: number;
    stringFrom?: number;
    stringTo?: number;
};
export declare const defaultOptions: {
    el: string;
    tuning: string[];
    stringCount: number;
    stringWidth: number;
    stringColor: string;
    fretCount: number;
    fretWidth: number;
    fretColor: string;
    nutWidth: number;
    nutColor: string;
    middleFretColor: string;
    middleFretWidth: number;
    scaleFrets: boolean;
    crop: boolean;
    fretLeftPadding: number;
    topPadding: number;
    bottomPadding: number;
    leftPadding: number;
    rightPadding: number;
    height: number;
    width: number;
    dotSize: number;
    dotStrokeColor: string;
    dotStrokeWidth: number;
    dotTextSize: number;
    dotFill: string;
    dotText: () => string;
    disabledOpacity: number;
    showFretNumbers: boolean;
    fretNumbersHeight: number;
    fretNumbersMargin: number;
    fretNumbersColor: string;
    font: string;
    barresColor: string;
};
export declare const defaultMuteStringsParams: {
    strings: number[];
    width: number;
    strokeWidth: number;
    stroke: string;
};
export declare type Options = {
    el: string | BaseType;
    tuning: Tuning;
    stringCount: number;
    stringWidth: number | [number];
    stringColor: string;
    fretCount: number;
    fretWidth: number;
    fretColor: string;
    nutWidth: number;
    nutColor: string;
    middleFretColor: string;
    middleFretWidth: number;
    scaleFrets: boolean;
    topPadding: number;
    bottomPadding: number;
    leftPadding: number;
    rightPadding: number;
    height: number;
    width: number;
    dotSize: number;
    dotStrokeColor: string;
    dotStrokeWidth: number;
    dotTextSize: number;
    dotFill: string;
    dotText: ValueFn<BaseType, unknown, string>;
    disabledOpacity: number;
    showFretNumbers: boolean;
    fretNumbersHeight: number;
    fretNumbersMargin: number;
    fretNumbersColor: string;
    crop: boolean;
    fretLeftPadding: number;
    font: string;
    barresColor: string;
};
declare type Rec = Record<string, string | number | boolean>;
declare type Point = {
    x: number;
    y: number;
};
declare type MuteStringsParams = {
    strings: number[];
    width?: number;
    strokeWidth?: number;
    stroke?: string;
};
export declare class Fretboard {
    strings: number[];
    frets: number[];
    positions: Point[][];
    svg: Selection<BaseType, unknown, HTMLElement, unknown>;
    wrapper: Selection<BaseType, unknown, HTMLElement, unknown>;
    private options;
    private baseRendered;
    private hoverDiv;
    private handlers;
    private system;
    private dots;
    constructor(options?: {});
    render(): Fretboard;
    setDots(dots: Position[]): Fretboard;
    clear(): Fretboard;
    style({ filter, text, fontSize, fontFill, ...opts }: {
        filter?: ValueFn<BaseType, unknown, boolean> | Rec;
        text?: ValueFn<BaseType, unknown, string>;
        fontSize?: number;
        fontFill?: string;
        [key: string]: string | number | Function | Rec;
    }): Fretboard;
    muteStrings(params: MuteStringsParams): Fretboard;
    renderChord(chord: string, barres?: Barre | Barre[]): Fretboard;
    renderScale({ type, root, box }: {
        type: string;
        root: string;
        box?: {
            system: Systems;
            box: string | number;
        };
    }): Fretboard;
    renderBox({ type, root, box }: {
        type: string;
        root: string;
        box?: {
            system: Systems;
            box: string | number;
        };
    }): Fretboard;
    on(eventName: string, handler: FretboardHandler): Fretboard;
    removeEventListeners(): Fretboard;
    private renderBarres;
    private baseRender;
    private getDotOffset;
}
export {};
